stages:
  - lint
  - test
  - build

variables:
  PYTHON_IMAGE: python:3.9
  POSTGRES_IMAGE: postgres:13.3-alpine
  NODE_IMAGE: node:17-alpine
  DOCKER_IMAGE: docker:latest
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

default:
  cache:
    paths:
      - .cache/pip
      - .node_modules


lint-core:
  stage: lint

  image: $PYTHON_IMAGE

  before_script:
    - cd src/hydra-core
    - python --version
    - pip install -r requirements.txt
    - pip install -r requirements-test.txt

  script:
    - flake8 .
    - pylint --output-format="parseable" time_reporting hydra_core
    - mypy --show-absolute-path --no-pretty .
    - black --check .
    - isort --check .
    - python manage.py makemigrations --dry-run --check

  rules:
    - changes:
      - src/hydra-core/**/*


test-core:
  stage: test

  image: $PYTHON_IMAGE
    
  before_script:
    - cd src/hydra-core
    - python --version
    - pip install -r requirements.txt
    - pip install -r requirements-test.txt

  variables:
    POSTGRES_DB: hydra
    POSTGRES_USER: hydra
    POSTGRES_PASSWORD: hydra
    DATABASE_URL: "postgres://hydra:hydra@db:5432/hydra"

  services:
    - name: $POSTGRES_IMAGE
      alias: db

  script:
    - pip install ./
    - pytest

  rules:
    - changes:
      - src/hydra-core/**/*


lint-ui:
  stage: lint

  image: $NODE_IMAGE

  before_script:
    - cd src/hydra-ui
    - node --version
    - npm install --legacy-peer-deps

  script:
    - npm run prettier
    - npx eslint --ext=.js,.jsx,.tx,.tsx --max-warnings=0
    - npx tsc --noEmit

  rules:
    - changes:
      - src/hydra-ui/**/*

test-ui:
  stage: test

  image: $NODE_IMAGE

  before_script:
    - cd src/hydra-ui
    - node --version
    - npm install --legacy-peer-deps

  variables:
    CI: 'true'

  script:
    - npm test --runInBand

  rules:
    - changes:
      - src/hydra-ui/**/*

docker-build-tag:
  stage: build

  image: $DOCKER_IMAGE

  before_script:
    - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin

  script:
    - docker buildx build 
      --output "type=image,push=true" 
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG 
      .

  rules:
    - if: $CI_COMMIT_TAG
      exists:
        - Dockerfile

