#!groovy

pipeline {
    agent {
        kubernetes {
            yamlFile 'jenkins/podTemplate.yaml'
            defaultContainer 'docker'
        }
    }

    parameters {
        booleanParam(name: 'CHECK', defaultValue: true, description: 'Run source code linters')
        booleanParam(name: 'COMPILE', defaultValue: true, description: 'Run Typescript compiler')
        booleanParam(name: 'TEST', defaultValue: true, description: 'Run unit tests')
        booleanParam(name: 'BUILD_IMAGES', defaultValue: env.BRANCH_NAME=="master", description: 'Build container images')
	    string(name:'IMAGE_TAG', defaultValue: (env.BRANCH_NAME=="master"? 'latest': env.BRANCH_NAME), description: "Docker image tag")
    }

    environment {
        REPO_NAME = "hydra"
        REGISTRY = "registry.anthonyoteri.com"
        DATE_TAG = java.time.LocalDate.now()
    }

    options {
        ansiColor('xterm')
    }

    stages {

        stage('Dependencies') {
            when {
                expression { params.CHECK || params.TEST }
            }

            parallel {
                stage("Dependencies (pip)") {
                    steps {
                        container('python') {

                            sh "apt-get update"
                            sh "apt-get install -y gcc libpq-dev"

                            dir('src/hydra_core') {
                                sh "pip3 install -r requirements.txt"
                                sh "pip3 install -r requirements-test.txt"
                                sh "pip3 install -e ."
                            }
                        }
                    }
                }

                stage("Dependencies (nodejs)") {
                    steps {
                        container('nodejs') {
                            dir('src/hydra-ui') {
                                sh "yarn"
                            }
                        }
                    }
                }
            }

        }

        stage('Check') {

            when {
                expression { params.CHECK }
            }
            
            parallel {
                stage('Lint (pylint)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "pylint time_reporting hydra_core"
                            }
                        }
                    }
                }
                stage('Lint (flake8)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "flake8"
                            }
                        }
                    }
                }
                stage('Lint (mypy)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "mypy ." 
                            }
                        }
                    }
                }
                stage('Lint (black)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "black --check ."
                            }
                        }
                    }
                }
                stage('Lint (isort)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "isort --check ."
                            }
                        }
                    }
                }
                stage('Lint (migrations)') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "python manage.py makemigrations --dry-run --check"
                            }
                        }
                    }
                }
                stage('Lint (eslint)') {
                    steps {
                        container('nodejs') {
                            dir('src/hydra-ui') {
                                sh "npx eslint --ext=.js,.jsx,.ts,.tsx --max-warnings=0 src"
                            }
                        }
                    }
                }
                stage('Lint (prettier)') {
                    steps {
                        container('nodejs') {
                            dir('src/hydra-ui') {
                                sh "yarn prettier -c src"
                            }
                        }
                    }
                }
            }
        }

        stage('Compile') {
            when {
                expression { params.COMPILE }
            }

            steps {
                container('nodejs') {
                    dir ('src/hydra-ui') {
                        sh "yarn run tsc --noEmit"
                    }
                }
            }
        }

        stage('Test') {

            when {
                expression { params.TEST } 
            }

            parallel {
                stage('Test (pytest') {
                    steps {
                        container('python') {
                            dir('src/hydra_core') {
                                sh "pytest -rs --junit-xml=results.xml"
                                junit 'results.xml'
                            }
                        }
                    }
                }
                stage('Test (jest)') {
                    steps {
                        container('nodejs') {
                            dir('src/hydra-ui') {
                                sh "yarn test --watchAll=false"
                            }
                        }
                    }
                }
            }
        }

        stage('Build images') {

            when {
                expression { params.BUILD_IMAGES }
            }

            steps {
                container('docker') {
                    sh "docker build -t ${REPO_NAME}:${DATE_TAG} ."
                }
            }
        }

        stage("Tag images") {

            when {
                expression { params.BUILD_IMAGES }
            }  

            steps {
                container('docker') {
                    sh "docker tag ${REPO_NAME}:${DATE_TAG} ${REGISTRY}/${REPO_NAME}:${DATE_TAG}-${BRANCH_NAME}"
                    sh "docker tag ${REPO_NAME}:${DATE_TAG} ${REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage("Post images") {

            when {
                expression { params.BUILD_IMAGES }
            }

            steps {
                container('docker') {
                    sh "docker push ${REGISTRY}/${REPO_NAME}:${DATE_TAG}-${BRANCH_NAME}"
                    sh "docker push ${REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
                }
            }

        }
    }
}
